generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  username       String   @unique
  email          String   @unique
  salt           String
  hashedPassword String   @map("hashed_password")
  createdAt      DateTime @default(now())

  wallets            Wallet[]
  orders             Order[]
  transactionsBuyer  Transaction[] @relation("BuyerTransactions")
  transactionsSeller Transaction[] @relation("SellerTransactions")
}

model Currency {
  symbol        String @id @unique
  name          String
  type          String @default("crypto") // 'crypto' or 'fiat'
  decimalPlaces Int    @default(4)

  wallets      Wallet[]
  ordersAsSrc  Order[]       @relation(name: "src")
  ordersAsDest Order[]       @relation(name: "dest")
  txAsSrc      Transaction[] @relation(name: "tx_src")
  txAsDest     Transaction[] @relation(name: "tx_dest")
}

model Wallet {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  currency    Currency @relation(fields: [currencySym], references: [symbol])
  currencySym String
  balance     Decimal  @default(0.0)

  @@unique([userId, currencySym]) // Each user has one wallet per currency
}

model Order {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [id])
  userId          Int
  orderType       String // 'buy' or 'sell'
  price           Decimal? // NULL for market orders
  amount          Decimal
  filledAmount    Decimal  @default(0.0) // Track how much has been executed
  status          String   @default("open") // 'open', 'filled', 'cancelled'
  createdAt       DateTime @default(now())
  currencySrcSym  String
  currencyDestSym String

  currencySrc  Currency @relation(name: "src", fields: [currencySrcSym], references: [symbol])
  currencyDest Currency @relation(name: "dest", fields: [currencyDestSym], references: [symbol])

  transactions OrderTransaction[]
}

model Transaction {
  id              Int      @id @default(autoincrement())
  buyer           User?    @relation(name: "BuyerTransactions", fields: [buyerId], references: [id])
  buyerId         Int?
  seller          User?    @relation(name: "SellerTransactions", fields: [sellerId], references: [id])
  sellerId        Int?
  amount          Decimal
  price           Decimal
  fee             Decimal  @default(0.0)
  executedAt      DateTime @default(now())
  currencySrcSym  String
  currencyDestSym String

  currencySrc  Currency @relation(name: "tx_src", fields: [currencySrcSym], references: [symbol])
  currencyDest Currency @relation(name: "tx_dest", fields: [currencyDestSym], references: [symbol])

  orders OrderTransaction[]
}

model OrderTransaction {
  orderId       Int
  transactionId Int

  order       Order       @relation(fields: [orderId], references: [id])
  transaction Transaction @relation(fields: [transactionId], references: [id])

  @@id([orderId, transactionId])
}
